input {
  file {
    path => "/logs/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "plain"
  }
}

filter {
  grok {
    match => { "message" => "%{IP:client_ip} - \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{URIPATHPARAM:request_path} HTTP/%{NUMBER:http_version}\" %{NUMBER:status_code} user_agent=\"%{DATA:user_agent}\" cf_ip=\"%{DATA:cloudflare_ip}\" cf_country=\"%{DATA:cloudflare_country}\" body=\"%{GREEDYDATA:request_body}\"" }
  }
  
  # Add GeoIP information based on client_ip
  geoip {
    source => "client_ip"
    target => "geoip"
    fields => ["city_name", "continent_name", "country_name", "country_code2", "location", "region_name"]
  }
  
  # Process based on HTTP method
  if [http_method] == "GET" {
    # Process query parameters for GET requests
    if [request_path] =~ "\?" {
      ruby {
        code => '
          require "uri"
          begin
            uri = URI.parse(event.get("request_path"))
            unless uri.query.nil?
              params = URI.decode_www_form(uri.query).to_h
              event.set("[get_captured][params]", params)
            end
          rescue => e
            event.set("[get_captured][error]", e.message)
          end
        '
      }
    }
    
    # Add path info for GET
    ruby {
      code => '
        begin
          uri = URI.parse(event.get("request_path"))
          event.set("[get_captured][path]", uri.path)
        rescue => e
          event.set("[get_captured][path]", event.get("request_path"))
        end
      '
    }
  }
  
  # Process POST requests
  if [http_method] == "POST" {
    # Process escape characters in request_body and parse JSON directly
    ruby {
      code => '
        body = event.get("request_body")
        if body
          # Handle common escape sequences
          body = body.gsub(/\\x0A/, "\n")
                     .gsub(/\\x22/, "\"") 
                     .gsub(/\\x09/, "\t")
                     .gsub(/\\x5C/, "\\")
                     .gsub(/\\x27/, "\'") 
          
          # Try to parse as JSON
          begin
            if body =~ /^\s*[{\[]/
              require "json"
              json_obj = JSON.parse(body)
              event.set("[post_captured][json]", json_obj)
            else
              event.set("[post_captured][raw]", body)
            end
          rescue => e
            event.set("[post_captured][json_error]", e.message)
            event.set("[post_captured][raw]", body)
          end
        end
      '
    }
    
    # Add path info for POST
    ruby {
      code => '
        begin
          uri = URI.parse(event.get("request_path"))
          event.set("[post_captured][path]", uri.path)
        rescue => e
          event.set("[post_captured][path]", event.get("request_path"))
        end
      '
    }
  }
  
  # Add timestamp
  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "@timestamp"
  }
  
  # Add a document type field
  mutate {
    add_field => { "doc_type" => "nginx_access" }
    # Remove fields we don't want to store
    remove_field => ["request_body", "message"]
  }
}

output {
  # Output to MongoDB
  mongodb {
    uri => "mongodb://root:example@mongodb:27017/nginx_logs?authSource=admin"
    database => "nginx_logs"
    collection => "access_logs"
    codec => "json"
  }
  
  # Output to JSONL files with hourly rotation
  file {
    path => "/logs/jsonl/nginx_access_%{+YYYY}%{+MM}%{+dd}%{+HH}.jsonl"
    codec => json_lines
  }
  
  # Also output to console for debugging
  stdout {
    codec => rubydebug
  }
}
